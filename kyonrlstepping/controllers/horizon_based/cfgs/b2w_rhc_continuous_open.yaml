solver:
  type: ilqr
  ipopt.linear_solver: ma57
  ipopt.tol: 0.1
#  ilqr.merit_der_threshold: 1e-3
#  ilqr.defect_norm_threshold: 1e-3
  ipopt.constr_viol_tol: 0.01
  ilqr.constraint_violation_threshold: 1e-2
#  ipopt.hessian_approximation: exact
  ipopt.print_level: 5
  ipopt.suppress_all_output: 'yes'
  ipopt.sb: 'yes'
  ilqr.suppress_all_output: 'yes'
  ilqr.codegen_enabled: true
  ilqr.codegen_workdir: /tmp/tyhio
  ilqr.enable_gn: true
  ilqr.hxx_reg_base: 0.0
  ilqr.n_threads: 0
  print_time: 0

constraints:
  - FL_foot
  - FR_foot
  - RR_foot
  - RL_foot

costs:
  - z_FL_foot
  - z_FR_foot
  - z_RR_foot
  - z_RL_foot
  # - vz_FL_foot
  # - vz_FR_foot
  # - vz_RR_foot
  # - vz_RL_foot
  - base_lin_velxy
  - base_lin_velz
  - base_omega
  # - base_capture
  - joint_posture_capture
  - v_root_reg
  - a_root_reg
  - v_jnts_reg
  - a_jnts_reg
  - v_wheel_jnts_reg
  - a_wheels_jnts_reg

#closed loop
.define:
  - &w_base_omega 6
  - &w_base_vxy 6
  - &w_base_vz 6
  - &w_base_z 6
  - &w_contact_z 10.0
  - &w_contact_vz 50.0
  - &w_base_capture 10.
  - &w_capture_postural 10.0
  - &w_capture_postural_ub 1.
  - &w_v_root 3e-1
  - &w_a_root 5e-1
  - &w_v_jnts 4e-1
  - &w_a_jnts 5e-2
  - &w_v_wheels 3e-2
  - &w_a_wheels 5e-2
  - &wheel_radius 0.124

base_lin_velxy:
  type: Cartesian
  distal_link: base
  indices: [0, 1]
  nodes: ${range(1, N+1)}
  cartesian_type: velocity
  weight: *w_base_vxy

base_lin_velz:
  type: Cartesian
  distal_link: base
  indices: [2]
  nodes: ${range(1, N+1)}
  cartesian_type: velocity
  weight: *w_base_vz

base_omega:
  type: Cartesian
  distal_link: base
  indices: [3, 4, 5]
  nodes: ${range(1, N+1)}
  cartesian_type: velocity
  weight: *w_base_omega

base_capture:
  type: Cartesian
  distal_link: base
  indices: [0, 1, 2, 3, 4, 5]
  nodes: ${range(N-5, N+1)}
  cartesian_type: velocity
  weight: *w_base_capture
  
# ==================================
rolling_contact_FL_foot:
  type: Rolling
  frame: FL_foot
  radius: *wheel_radius

rolling_contact_FR_foot:
  type: Rolling
  frame: FR_foot
  radius: *wheel_radius

rolling_contact_RR_foot:
  type: Rolling
  frame: RR_foot
  radius: *wheel_radius

rolling_contact_RL_foot:
  type: Rolling
  frame: RL_foot
  radius: *wheel_radius

# ==================================

interaction_FL_foot:
  type: VertexForce
  frame: FL_foot
  fn_min: 50
  enable_fc: true
  friction_coeff: 0.2
  vertex_frames:
    - FL_foot

interaction_FR_foot:
  type: VertexForce
  frame: FR_foot
  fn_min: 50
  enable_fc: true
  friction_coeff: 0.2
  vertex_frames:
    - FR_foot

interaction_RR_foot:
  type: VertexForce
  frame: RR_foot
  fn_min: 50
  enable_fc: true
  friction_coeff: 0.2
  vertex_frames:
    - RR_foot

interaction_RL_foot:
  type: VertexForce
  frame: RL_foot
  fn_min: 50
  enable_fc: true
  friction_coeff: 0.2
  vertex_frames:
    - RL_foot

FL_foot:
  type: Contact
  subtask: [interaction_FL_foot, rolling_contact_FL_foot]

FR_foot:
  type: Contact
  subtask: [interaction_FR_foot, rolling_contact_FR_foot]

RR_foot:
  type: Contact
  subtask: [interaction_RR_foot, rolling_contact_RR_foot]

RL_foot:
  type: Contact
  subtask: [interaction_RL_foot, rolling_contact_RL_foot]

# when using continuous joints
joint_posture_capture:
  type: Postural
  weight: *w_capture_postural
  indices: [0, 1, 2,
            5, 6, 7,
            10, 11, 12,
            15, 16, 17]
  nodes: ${range(N-5, N+1)}

v_root_reg:
  type: Regularization
  nodes: ${range(0, 1)}
  indices: [0, 1, 2, 3, 4, 5]
  weight:
    v: *w_v_root

a_root_reg:
  type: Regularization
  nodes: ${range(0, N+1)}
  indices: [0, 1, 2, 3, 4, 5]
  weight:
    a: *w_a_root # 0.01

v_jnts_reg:
  type: Regularization
  nodes: ${range(0, N+1)}
  indices: [6, 7, 8, 
    10, 11, 12,
    14, 15, 16, 
    18, 19, 20 ]
  weight:
    v: *w_v_jnts

a_jnts_reg:
  type: Regularization
  nodes: ${range(0, N+1)}
  indices: [6, 7, 8, 
    10, 11, 12,
    14, 15, 16, 
    18, 19, 20 ]
  weight:
    a: *w_a_jnts # 0.01

v_wheel_jnts_reg:
  type: Regularization
  nodes: ${range(0, N+1)}
  indices: [9, 13, 17, 21]
  weight:
    v: *w_v_wheels

a_wheels_jnts_reg:
  type: Regularization
  nodes: ${range(0, N+1)}
  indices: [9, 13, 17, 21]
  weight:
    a: *w_a_wheels # 0.01

z_FL_foot:
  type: Cartesian
  distal_link: FL_foot
  indices: [2]
  cartesian_type: position
  weight: *w_contact_z

z_FR_foot:
  type: Cartesian
  distal_link: FR_foot
  indices: [2]
  cartesian_type: position
  weight: *w_contact_z

z_RR_foot:
  type: Cartesian
  distal_link: RR_foot
  indices: [2]
  cartesian_type: position
  weight: *w_contact_z

z_RL_foot:
  type: Cartesian
  distal_link: RL_foot
  indices: [2]
  cartesian_type: position
  weight: *w_contact_z

vz_FL_foot:
  type: Cartesian
  distal_link: FL_foot
  indices: [2]
  cartesian_type: velocity
  weight: *w_contact_vz

vz_FR_foot:
  type: Cartesian
  distal_link: FR_foot
  indices: [2]
  cartesian_type: velocity
  weight: *w_contact_vz

vz_RR_foot:
  type: Cartesian
  distal_link: RR_foot
  indices: [2]
  cartesian_type: velocity
  weight: *w_contact_vz

vz_RL_foot:
  type: Cartesian
  distal_link: RL_foot
  indices: [2]
  cartesian_type: velocity
  weight: *w_contact_vz
